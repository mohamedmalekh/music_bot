# .github/workflows/bot_runner.yml
name: Run Telegram Music Bot

on:
  schedule:
    # Exécute toutes les 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:        # permet un déclenchement manuel

# Empêche les exécutions concurrentes sur la même branche
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Nécessaire pour commit & push du processed.json
permissions:
  contents: write

jobs:
  run-bot:
    # permet à toutes les étapes d’accéder à HIST_FILE
    env:
      HIST_FILE: processed.json

    runs-on: ubuntu-latest

    steps:
      # 1) Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Debug: lister tous les fichiers pour s’assurer que bot.py est à la racine
      - name: Debug list files
        run: |
          echo "📂 Working dir: $(pwd)"
          ls -la
          echo "📁 Recursive listing:"
          ls -R .

      # 3) Installer Python & mettre en cache pip
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      # 4) Installer ffmpeg (nécessaire à yt-dlp & spotdl)
      - name: Install ffmpeg
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends ffmpeg

      # 5) Installer les dépendances Python
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 6) Exécuter le script principal
      - name: Run the bot script
        env:
          TELEGRAM_BOT_TOKEN:    ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_GROUP_ID:     ${{ secrets.TELEGRAM_GROUP_ID }}
          SPOTIFY_CLIENT_ID:     ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
        run: |
          echo "🚀 Starting bot.py"
          python bot.py

      # 7) Configurer Git pour commit & push
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # 8) Vérifier si processed.json a changé
      - name: Check for changes in history file
        id: git-check
        run: |
          echo "changed=$(if git diff --quiet processed.json; then echo 'false'; else echo 'true'; fi)" >> $GITHUB_OUTPUT

      # 9) Commit & push processed.json si nécessaire
      - name: Commit and push history file if changed
        if: steps.git-check.outputs.changed == 'true'
        run: |
          echo "📄 processed.json has changed — committing..."
          git add processed.json
          git commit -m "chore: update processed.json [skip ci]"
          echo "🚀 Pushing changes..."
          for i in 1 2 3; do
            git push && break
            echo "⚠️ Push attempt $i failed, retrying in 15s..."
            sleep 15
          done
